version: "3.8"

services:
  file_server:
    #container_name: file-server-get-put-delete
    build:
        context: file_server/
    ports:
      - "1234"
    deploy:
      resources:
        limits:
          memory: "300M"
          cpus: "0.1"
      replicas: 3
    volumes:
      - ./.fileserver/data:/tmp/
    
  file_server_put:
    #container_name: file-server-put
    build:
        context: file_server/
    ports:
      - "1234"
    deploy:
      resources:
        limits:
          memory: "300M"
          cpus: "0.10"
      replicas: 2
    volumes:
      - ./.fileserver/data:/tmp/

  # file_server_delete:
  #   container_name: file-server-delete
  #   build:
  #       context: file_server/
  #   ports:
  #     - "1234"
  #   deploy:
  #     resources:
  #       limits:
  #         memory: "128M"
  #         cpus: "0.25"
  #     replicas: 1
  #   volumes:
  #     - ./.fileserver/data:/tmp/
    
  redis:
    container_name: redis
    build:
        context: redis/
    ports:
      - "6060:6060"
    deploy:
      resources:
        limits:
          memory: "1000M"
          cpus: "0.25"
      replicas: 1
    volumes:
      - ./.fileserver/data:/tmp/

  middleware_pool:
    build:
        context: middleware/
    ports:
      - "7070"
    deploy:
      resources:
        limits:
          memory: "500M"
          cpus: "0.1"
      replicas: 10
    volumes:
      - ./.fileserver/data:/tmp/
    depends_on:
      - file_server      

  nginx_fileserver:
    image: nginx:latest
    ports:
      - "1234"
    volumes:
      - ./nginx_fileserver.conf:/etc/nginx/nginx.conf:ro
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.10"
    depends_on:
      - file_server

  nginx_fileserver_put:
    image: nginx:latest
    ports:
      - "1234"
    volumes:
      - ./nginx_fileserver_put.conf:/etc/nginx/nginx.conf:ro
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.10"
    depends_on:
      - file_server

  nginx_middleware:
    image: nginx:latest
    ports:
      - "8080"
    volumes:
      - ./nginx_middleware.conf:/etc/nginx/nginx.conf:ro
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: ".15"
    depends_on:
      - middleware_pool
    
  # LOAD TESTER:
  # This container is for convenience and does not count against your resource cap.
  # Comment this out if you want to manually run load tests from the `load_test` directory.
  go_load_tester:
    container_name: load-tester
    build:
      context: go_load_test/
    environment:
      - FILE_SERVER_HOST=nginx_middleware           # Point this to your application middleware
      - FILE_SERVER_PORT=8080                # Point this to your application middleware (port will change)
      - FILE_SERVER_PROTO=http                  # Point this to your application middleware
      - FILE_SERVER_PATH_PREFIX=api/fileserver
      - REQUESTS_PER_SECOND=1                   # Base requests/sec the load test will begin on.
      - SEED_GROWTH_AMOUNT=1                    # Every second, this many more requests will be scheduled
      - ENABLE_REQUEST_RAMP=true                # If true, every 1 minute, your seed growth rate doubles
      - ENABLE_FILE_RAMP=true                   # If true, every 20 seconds the max possible file size written doubles
      - MAX_FILE_COUNT=3000                     # Recommend 2-5x total REQUESTS_PER_SECOND (consider seed in this calculation)
      - MAX_FILE_SIZE=1024                      # 1KB, but could be set to ANYTHING in live tests
      - TERM=xterm-256color
    volumes:
      - ./.fileserver/data:/tmp/                # Error logs are written to this data dir under load_test.log
    depends_on:
      # - file_server_get
      # - file_server_put
      # - file_server_delete
      - file_server
      - middleware_pool
